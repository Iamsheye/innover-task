import { useState } from "react";
import type { NextPage } from "next";
import { useRouter } from "next/router";
import Head from "next/head";
import axios from "axios";
import toast from "react-hot-toast";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { signupSchema } from "../utils/schemas";
import Button from "../components/Button/Button";
import Container from "../components/Container/Container";
import {
  FormGroup,
  FormInput,
  FormLabel,
  FormSelect,
} from "../components/Form";
import Title from "../components/Title/Title";
import ErrorText from "../components/ErrorText/ErrorText";
import Loading from "../components/Loading/Loading";
interface IFormInputs {
  email: string;
  pword: string;
  fullName: string;
  role: string;
}

const Signup: NextPage = () => {
  const FormFields = [
    {
      label: "Email address",
      id: "email",
      type: "email",
      name: "email",
      placeholder: "Enter your email address",
    },
    {
      label: "Password",
      id: "pword",
      type: "password",
      name: "pword",
      placeholder: "Enter your password",
    },
    {
      label: "Full name",
      id: "fullName",
      type: "text",
      name: "fullName",
      placeholder: "Enter your full name",
    },
  ];

  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInputs>({
    resolver: yupResolver(signupSchema),
  });

  const onSubmit = handleSubmit(async (data) => {
    try {
      setIsSubmitting(true);
      const res = await axios.post("/user/create", {
        email: data.email,
        password: data.pword,
        userType: data.role,
        fullName: data.fullName,
      });
      toast.success("Signup successful");
      router.push("/login");
    } catch (err: any) {
      toast.error(err.response.data.message || "An error occured");
    } finally {
      setIsSubmitting(false);
    }
  });

  return (
    <>
      <Head>
        <title>Techinnover Frontend | Signup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Title>Signup</Title>
        <form onSubmit={onSubmit} autoComplete="off">
          {FormFields.map((field) => (
            <FormGroup key={field.id}>
              <FormLabel htmlFor={field.id}>{field.label}</FormLabel>
              <FormInput
                {...register(field.name as any)}
                // @ts-ignore
                error={errors[field.name]?.message}
                type={field.type}
                id={field.id}
                name={field.name}
                placeholder={field.placeholder}
              />
              {/* @ts-ignore */}
              <ErrorText>{errors[field.name]?.message}</ErrorText>
            </FormGroup>
          ))}
          <FormGroup id="sel">
            <FormLabel htmlFor="role">What is your role</FormLabel>
            <FormSelect id="role" {...register("role")}>
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
            </FormSelect>
          </FormGroup>
          <Button type="submit">
            {isSubmitting ? <Loading /> : "Sign Up"}
          </Button>
        </form>
      </Container>
    </>
  );
};

export default Signup;
